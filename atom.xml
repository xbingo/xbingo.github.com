<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rubinxie&#39;s home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xieyubin.com/"/>
  <updated>2016-12-08T16:35:37.000Z</updated>
  <id>http://www.xieyubin.com/</id>
  
  <author>
    <name>rubinxie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android进阶学习资源整理</title>
    <link href="http://www.xieyubin.com/android-learning-resources/"/>
    <id>http://www.xieyubin.com/android-learning-resources/</id>
    <published>2016-12-08T16:21:10.000Z</published>
    <updated>2016-12-08T16:35:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>可能有些新同学在学习了Android开发的基础知识之后，希望学习一些进阶的技巧，或者对某些技术细节有更深入的了解。或者老司机们想跳出原有知识体系，了解更多业界前沿技术的应用，吸收新的思路和想法。光是看书和做项目时再研究也许并不能满足大家的需求。这里抛砖引玉，介绍一些Android进阶学习的资料，大家如果还有什么好的资源，欢迎补充。</p>
<h2 id="Google官方"><a href="#Google官方" class="headerlink" title="Google官方"></a>Google官方</h2><h4 id="Android-Developers-墙内版"><a href="#Android-Developers-墙内版" class="headerlink" title="Android Developers (墙内版)"></a><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android Developers</a> (<a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">墙内版</a>)</h4><p>学习安卓最权威的地方，无需解释！最新推出了墙内可以直接访问的中国站点，但只有极少数文档有汉化。重点看Training和API Guides两部分。</p>
<h4 id="Android开发者官方博客"><a href="#Android开发者官方博客" class="headerlink" title="Android开发者官方博客"></a><a href="http://android-developers.blogspot.com/" target="_blank" rel="external">Android开发者官方博客</a></h4><p>新版本、新特性的官方介绍可以在这里找到，可以第一时间尝鲜</p>
<h4 id="Android-Developers-Youtube-Channel"><a href="#Android-Developers-Youtube-Channel" class="headerlink" title="Android Developers Youtube Channel"></a><a href="https://www.youtube.com/channel/UCVHFbqXqoYvEWM1Ddxl0QDg" target="_blank" rel="external">Android Developers Youtube Channel</a></h4><p>官方的youtube频道，里面有大量值得一看的视频列表，比如每年的Google I/O录像、著名的Android Performance Patterns、Android Development Petterns等等，DevBytes系列也有部分讲解小技巧的视频非常值得一看。这里干货非常多，美中不足的是仅有较少视频有中文字幕，如果遇到视频中英语带有口音的看得比较吃力（Google I/O的视频是重灾区）。</p>
<h4 id="Google-Developers-Youtube-Channel"><a href="#Google-Developers-Youtube-Channel" class="headerlink" title="Google Developers Youtube Channel"></a><a href="https://www.youtube.com/channel/UC_x5XG1OV2P6uZZ5FSM9Ttw" target="_blank" rel="external">Google Developers Youtube Channel</a></h4><p>同样是Google官方的youtube频道，但内容覆盖范围涉及所有Google其它领域（如AI、广告）的开发者。有一些视频是单独针对Android开发者的，其它视频可当做了解前沿技术的途径。</p>
<h4 id="谷歌开发者公众号"><a href="#谷歌开发者公众号" class="headerlink" title="谷歌开发者公众号"></a>谷歌开发者公众号</h4><p>微信公众号“Google_Developers”，Google中国官方开发者公众号，可作为补充阅读。</p>
<h4 id="谷歌开发者社区"><a href="#谷歌开发者社区" class="headerlink" title="谷歌开发者社区"></a><a href="http://chinagdg.org/" target="_blank" rel="external">谷歌开发者社区</a></h4><p>里面有一些中文的技术文章，还将部分官方youtube频道里的视频搬运到了优酷，甚至有些会加上中文字幕。 </p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h4 id="Awesome-Android"><a href="#Awesome-Android" class="headerlink" title="Awesome Android"></a>Awesome Android</h4><p>GitHub上有很多标题为Awesome Android的项目，包括但不限于 <a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">JStumpp/awesome-android</a>、<a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">snowdream/awesome-android</a>、<a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a>、<a href="https://github.com/wasabeef/awesome-android-tools" target="_blank" rel="external">awesome-android-tools</a>等等。这些项目都是一些安卓开发的学习资源、开源类库、开发工具等的列表，可谓应有尽有。另外还有<a href="awesome-java">awesome-java</a>，有些工具或者类库同样适用于Android。</p>
<h4 id="Trinea的开源项目汇总"><a href="#Trinea的开源项目汇总" class="headerlink" title="Trinea的开源项目汇总"></a><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Trinea的开源项目汇总</a></h4><p>汇总了很多国内外值得学习的开源项目，作者的博客和公众号也值得关注</p>
<h4 id="free-programming-books"><a href="#free-programming-books" class="headerlink" title="free-programming-books"></a><a href="https://github.com/vhf/free-programming-books" target="_blank" rel="external">free-programming-books</a></h4><p>收集了许多免费开源的编程书籍，也有<a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">中文版本</a>。里面有很多并不是完整的书籍，也有一些文章列表或者文档翻译之类的资源。</p>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h4 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a><a href="https://gold.xitu.io/" target="_blank" rel="external">掘金</a></h4><p>墙裂推荐！每天都有大量干货文章，谁用谁知道~~ 有了它，妈妈再也不用担心我没有技术文章看了。</p>
<h4 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a></h4><p>国内老牌技术社区，内容非常全面，我们主要关注移动开发方面的资讯、博客、专题以及会议等等。网站精选的《移动开发周报》非常值得订阅。《程序员》杂志质量很高，但容量以及时效性都不够，偶尔看看就好。</p>
<h4 id="infoq"><a href="#infoq" class="headerlink" title="infoq"></a><a href="http://www.infoq.com/cn/" target="_blank" rel="external">infoq</a></h4><p>有英文站也有中文站，个人认为看中文站就足够了。网站经常举办线下分享会，在网站上可以看到很多技术演讲视频。我们主要关注“移动”分类下面的内容。</p>
<h4 id="Android-Weekly"><a href="#Android-Weekly" class="headerlink" title="Android Weekly"></a><a href="http://us2.campaign-archive2.com/home/?u=887caf4f48db76fd91e20a06d&amp;id=4eb677ad19" target="_blank" rel="external">Android Weekly</a></h4><p>国外的Android开发周报，国内很多文章都从这里翻译过来的。</p>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h4 id="Facebook-Code"><a href="#Facebook-Code" class="headerlink" title="Facebook Code"></a><a href="https://code.facebook.com/android/" target="_blank" rel="external">Facebook Code</a></h4><p>Facebook开发团队的官方博客，上面有Facebook的一些开源组件介绍，以及app优化经验。</p>
<h4 id="Clot-McAnlis"><a href="#Clot-McAnlis" class="headerlink" title="Clot McAnlis"></a><a href="https://medium.com/@duhroach" target="_blank" rel="external">Clot McAnlis</a></h4><p>《Android Performance Patterns》里面的光头兄贵，主要研究方向是图片压缩以及安装包减包。</p>
<h4 id="美团点评技术团队"><a href="#美团点评技术团队" class="headerlink" title="美团点评技术团队"></a><a href="http://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a></h4><p>美团点评是国内技术积累较强的团队，这里面介绍Android方面技术的文章颇有含金量。</p>
<h4 id="郭霖"><a href="#郭霖" class="headerlink" title="郭霖"></a><a href="http://blog.csdn.net/sinyu890807" target="_blank" rel="external">郭霖</a></h4><p>《第一行代码Android》作者，这本书我没有看过，但是他的文章写得还不错。他的微信公众号还会有其他作者的投稿。</p>
<h4 id="胡凯"><a href="#胡凯" class="headerlink" title="胡凯"></a><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a></h4><p>鹅厂上海p图团队同事，最著名的是提炼浓缩了官方视频《Android Performance Patterns》系列，另外还发起了官方培训教程翻译计划。</p>
<h4 id="markzhai"><a href="#markzhai" class="headerlink" title="markzhai"></a><a href="http://blog.zhaiyifan.cn/" target="_blank" rel="external">markzhai</a></h4><p>前同事mark现在算是技术圈中的小网红，技术文章经常被各种大号推荐、转发，干货确实很多。</p>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><ul>
<li>微信客户端开发(WeMobileDev)</li>
<li>QQ空间终端开发团队(qzonemobiledev)</li>
<li>QQ音乐技术团队</li>
<li>腾讯bugly(weixinBugly)</li>
</ul>
<p>这几个公众号自然不用过多介绍，鹅厂出品必属精品。虽然更新频率不高，但是篇篇都是值得一读的精华。</p>
<p>其它个人公众号或者博客太多了，这里不一一列举。像掘金啊，各种周报啊，转发文章的时候都会直接外链到原文地址或者留有公众号二维码，看到好的博客或者公众号可以适当订阅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可能有些新同学在学习了Android开发的基础知识之后，希望学习一些进阶的技巧，或者对某些技术细节有更深入的了解。或者老司机们想跳出原有知识体系，了解更多业界前沿技术的应用，吸收新的思路和想法。光是看书和做项目时再研究也许并不能满足大家的需求。这里抛砖引玉，介绍一些Andr
    
    </summary>
    
      <category term="总结" scheme="http://www.xieyubin.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="学习资源" scheme="http://www.xieyubin.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>【译】实现通用的共享图片过场动画</title>
    <link href="http://www.xieyubin.com/implementing-imageview-transition-between-activities-for-pre-lollipop-devices/"/>
    <id>http://www.xieyubin.com/implementing-imageview-transition-between-activities-for-pre-lollipop-devices/</id>
    <published>2016-10-03T16:00:00.000Z</published>
    <updated>2016-10-05T12:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近想要对项目里的一些过场动画作体验优化，但是迫于API level的限制，无法直接使用Android原生的特性，刚好可以参考此文实现。</p>
<p>原文链接：<a href="https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.jagzoke8q" target="_blank" rel="external">Implementing ImageView transition between activities for pre-Lollipop devices.</a></p>
</blockquote>
<p>从Android 5.0开始，谷歌引入了一个很好玩的特性，“共享元素过场(shared elements transition)”。使用它我们可以让我们的UI元素在activity切换时就像用一个很酷的动画从一个activity移动到另一个一样。我们将在Android 5.0以下实现它。文中使用的代码可以在<a href="https://github.com/danylovolokh/ImageTransition" target="_blank" rel="external">GitHub</a>上找到。</p>
<p>本文的动画基于Chet Haase的视频：<a href="https://www.youtube.com/watch?v=CPxkoe2MraA" target="_blank" rel="external">DevBytes: Custom Activity Animations</a><a href="http://savefrom.net/?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCPxkoe2MraA&amp;utm_source=chameleon&amp;utm_medium=extensions&amp;utm_campaign=link_modifier" title="Get a direct link" target="_blank" rel="external"></a></p>
<p>本文和Chet的例子不同之处在于，我还会处理<code>ImageView</code>的缩放。这会使动画看起来更自然。<code>ImageView</code>在前一个界面的<code>ImageView.ScaleType</code>跟第二个界面放大的<code>ImageView</code>是不一样的。以下是一个示例：<br><img src="http://o6l8fqr7s.bkt.clouddn.com/set_1-1.gif" alt="" title="Shared element transition from one activity to another."></p>
<p><img src="http://o6l8fqr7s.bkt.clouddn.com/set_2-1.gif" alt="" title="Canceling of shared element transition until it’s finished."></p>
<p>这是它用原生shared element transition实现的样子：<br><img src="http://o6l8fqr7s.bkt.clouddn.com/set_3-1.gif" alt="" title="Shared element transition between activities on Android Lollipop."></p>
<a id="more"></a>
<h3 id="使Activity透明"><a href="#使Activity透明" class="headerlink" title="使Activity透明"></a>使Activity透明</h3><p>工程里有两个Activity：</p>
<ul>
<li><code>ImagesListActivity</code></li>
<li><code>ImageDetailsActivity</code></li>
</ul>
<p>首先，我们要让<code>ImagesListActivity</code>的内容在图片过度的过程中可见。这要改变activity样式中的两个属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span></div><div class="line">    @android:color/transparent</div><div class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span></div><div class="line">    true</div><div class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在 <code>ImageListActivity</code> 在 <code>ImageDetailsActivity</code> 出现在屏幕上的时候也可见了。但是这样做有个主要的缺点：我们最终会通过设置背景颜色让 <code>ImageDetailsActivity</code> 完全不透明。这样 <code>ImageListActivity</code> 仍然会被 <code>WindowManger</code> 绘制，尽管它不可见！</p>
<p>我们的例子中有两个 activity。在 Android 5.0以后，我们可以在动画运行过程中让“第二个activity”透明，然后再把它变得不透明。在这之后”第一个activity”不会再被绘制，并且可以引发垃圾回收。然而，在Lollipop之前的版本不是这样的。</p>
<p>让 <code>ImageDetailsActivity</code> 透明也会改变 <code>ImagesListActivity</code> 的行为。当 <code>ImageDetailsActivity</code> 启动的时候，<code>ImageListActivity</code> 只会执行 <code>onPause()</code> 回调。</p>
<h3 id="进入ImageDetailsActivity的动画"><a href="#进入ImageDetailsActivity的动画" class="headerlink" title="进入ImageDetailsActivity的动画"></a>进入ImageDetailsActivity的动画</h3><p>当 <code>ImagesListActivity</code> 的图片被点击的时候，会启动 <code>ImageDetailsActivity</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImagesListActivity</span></div><div class="line"></div><div class="line">mImageDetailsImageModel = imageModel;</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] screenLocation = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">image.getLocationInWindow(screenLocation);</div><div class="line"></div><div class="line">Intent startIntent = ImageDetailsActivity.getStartIntent(<span class="keyword">this</span>, </div><div class="line">        imageFile,</div><div class="line">        screenLocation[<span class="number">0</span>],</div><div class="line">        screenLocation[<span class="number">1</span>],</div><div class="line">        image.getWidth(),</div><div class="line">        image.getHeight(),</div><div class="line">        image.getScaleType());</div><div class="line"></div><div class="line">startActivity(startIntent);</div></pre></td></tr></table></figure>
<p>被点击图片的一些信息会被传递到 <code>ImageDetailsActivity</code>：</p>
<ul>
<li><code>ImageView</code> 的左上角位置</li>
<li><code>ImageView</code> 的宽高</li>
<li>图片的 <code>ScaleType</code></li>
<li>图片本身，用来在 <code>ImageDetailsActivity</code> 中加载图片</li>
</ul>
<p>另外，<code>ImageListActivity</code>中的<code>imageModel</code>要保存起来以备后面使用。</p>
<p>在<code>ImageDetailActivity</code>中，创建一个跟被点击的图片一样的<code>ImageView</code>，添加到跟节点<code>FrameLayout</code>（android.R.id.content ——传递到<code>setContentView()</code>中的layout的父view）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImageDetailsActivity</span></div><div class="line"></div><div class="line">FrameLayout androidContent = (FrameLayout)</div><div class="line">        getWindow()</div><div class="line">        .getDecorView()</div><div class="line">        .findViewById(android.R.id.content);</div><div class="line"></div><div class="line">mTransitionImage = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">androidContent.addView(mTransitionImage);</div><div class="line"></div><div class="line">Bundle bundle = getIntent().getExtras();</div><div class="line"></div><div class="line"><span class="keyword">int</span> thumbnailTop = bundle.getInt(KEY_THUMBNAIL_INIT_TOP_POSITION)</div><div class="line">        - getStatusBarHeight();</div><div class="line"><span class="keyword">int</span> thumbnailLeft = bundle.getInt(KEY_THUMBNAIL_INIT_LEFT_POSITION);</div><div class="line"><span class="keyword">int</span> thumbnailWidth = bundle.getInt(KEY_THUMBNAIL_INIT_WIDTH);</div><div class="line"></div><div class="line"><span class="keyword">int</span> thumbnailHeight = bundle.getInt(KEY_THUMBNAIL_INIT_HEIGHT);</div><div class="line"></div><div class="line">ImageView.ScaleType scaleType = (ImageView.ScaleType) </div><div class="line">        bundle.getSerializable(KEY_SCALE_TYPE);</div><div class="line"></div><div class="line">FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) </div><div class="line">        mTransitionImage.getLayoutParams();</div><div class="line"></div><div class="line">layoutParams.height = thumbnailHeight;</div><div class="line">layoutParams.width = thumbnailWidth;</div><div class="line">layoutParams.setMargins(thumbnailLeft, thumbnailTop, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">File imageFile = (File)      </div><div class="line">        getIntent()</div><div class="line">        .getSerializableExtra(IMAGE_FILE_KEY);</div><div class="line"></div><div class="line">mTransitionImage.setScaleType(scaleType);</div><div class="line"></div><div class="line">mImageDownloader.load(imageFile).noFade().into(mTransitionImage);</div></pre></td></tr></table></figure>
<p>我们设置 view 的 margin 来达到新的 view 更之前界面中的位置完全一致。你也许注意到了<code>mImageDownloader</code>，我在项目里使用了 Picasso 加载图片。</p>
<p>然后，放大的ImageView要先加载到layout中，然后我们才能开始运行动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImageDetailsActivity</span></div><div class="line"></div><div class="line">mImageDownloader.load(imageFile).into(mEnlargedImage, <span class="keyword">new</span> Callback() &#123;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">         * 图片加载成功</div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">            Log.v(TAG, <span class="string">"onSuccess, mEnlargedImage"</span>);</div><div class="line">            <span class="comment">// 在这个回调中，我们已经把图片加载到ImageView中，但是</span></div><div class="line">            <span class="comment">// 我们还要等到measure完成以后才能运行动画。我们利用</span></div><div class="line">            <span class="comment">// OnPreDrawListener来确保所有的view已经被measure</span></div><div class="line">            <span class="keyword">if</span> (savedInstanceState == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 如果saveInstanceState是null，</span></div><div class="line">                <span class="comment">// 证明activity是第一次启动，运行动画</span></div><div class="line">                runEnteringAnimation();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// activity是从后台切换回前台的，只加载图片</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">()</span> </span>&#123;</div><div class="line">             <span class="comment">// 注意：onError没有处理，如果图片加载过程中</span></div><div class="line">             <span class="comment">// 出现了OutOfMemory，我们必须在这里处理</span></div><div class="line">            Log.v(TAG, <span class="string">"onError, mEnlargedImage"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重要的是，只有<code>savedInstanceState</code>是null的时候我们才运行动画。否则，就意味着只是从后台切换到前台，或者从其它activity返回。</p>
<h3 id="用OnPreDrawListener在正确的时候开始动画"><a href="#用OnPreDrawListener在正确的时候开始动画" class="headerlink" title="用OnPreDrawListener在正确的时候开始动画"></a>用OnPreDrawListener在正确的时候开始动画</h3><p>接下来是<code>runEnteringAnimation()</code>的代码。这个方法是一个小窍门：设置<br><a href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html" target="_blank" rel="external">android.view.ViewTreeObserver.OnPreDrawListener</a>。当<code>onPreDraw()</code>方法被调用的时候，布局已经测量过了。这意味着我们这是可以使用图片在屏幕上的位置了。以下是我们在<code>OnPreDrawListener</code>做的事情：</p>
<ol>
<li>当第一帧被绘制时我们开始动画。</li>
<li>我们只是单纯地让第二帧绘制。</li>
<li>让之前界面被点击的<code>ImageView</code>不可见，并且移除<code>onPreDrawListener</code>。我们通过让它不可见使得<code>ImageDetailsActivity</code>中复制的<code>ImageView</code>就像是直接从它被点击的位置移动过来的一样。并且它移动的时候还要在原来的位置留下一个空洞。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImageDetailsActivity</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runEnteringAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.v(TAG, <span class="string">"runEnteringAnimation, addOnPreDrawListener"</span>);</div><div class="line"></div><div class="line">    mEnlargedImage</div><div class="line">        .getViewTreeObserver()</div><div class="line">        .addOnPreDrawListener(</div><div class="line">        <span class="keyword">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mFrames = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// When this method is called we already have everything </span></div><div class="line">            <span class="comment">// laid out and measured so we can start our animation</span></div><div class="line">            Log.v(TAG, <span class="string">"onPreDraw, mFrames "</span> + mFrames);</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (mFrames++) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    <span class="comment">/**</span></div><div class="line">                     * 1\. start animation on first frame</div><div class="line">                     */ </div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span>[] finalLocationOnTheScreen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">                 mEnlargedImage.getLocationOnScreen(finalLocationOnTheScreen);</div><div class="line"></div><div class="line">                    mEnterScreenAnimations.playEnteringAnimation(</div><div class="line">                            finalLocationOnTheScreen[<span class="number">0</span>], <span class="comment">// left</span></div><div class="line">                            finalLocationOnTheScreen[<span class="number">1</span>], <span class="comment">// top</span></div><div class="line">                            mEnlargedImage.getWidth(),</div><div class="line">                            mEnlargedImage.getHeight());</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    <span class="comment">/**</span></div><div class="line">                     * 2\. Do nothing. We just draw this frame</div><div class="line">                     */</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 3.</div><div class="line">             * Make view on previous screen invisible on after this </div><div class="line">             * drawing frame</div><div class="line">             * Here we ensure that animated view will be visible </div><div class="line">             * when we make the view behind invisible</div><div class="line">             */</div><div class="line">            Log.v(TAG, <span class="string">"run, onAnimationStart"</span>);</div><div class="line">            mBus.post(<span class="keyword">new</span> ChangeImageThumbnailVisibility(<span class="keyword">false</span>));</div><div class="line">            mEnlargedImage.getViewTreeObserver()</div><div class="line">                .removeOnPreDrawListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">            Log.v(TAG, <span class="string">"onPreDraw, &lt;&lt; mFrames "</span> + mFrames);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么我们要这样处理帧呢？这是因为Android的渲染系统是双缓冲的，我们让系统画两帧来确保变换中的<code>ImageView</code>已经可见。相似的技术在SDK中也被使用。如果我们不这样做<code>ImageView</code>在动画过程中可能会闪。</p>
<p>参见<code>android.app.EnterTransitionCoordinator#startSharedElementTransition</code>。我们也可以通过<a href="https://source.android.com/devices/graphics/architecture.html" target="_blank" rel="external">这个链接</a>读到更多相关知识。</p>
<p>上面的代码有一行代码是Otto event bus的调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBus.post(<span class="keyword">new</span> ChangeImageThumbnailVisibility(<span class="keyword">false</span>));</div></pre></td></tr></table></figure>
<p>它发送了一条消息给<code>ImageListActivity</code>，让点击的图片从列表中隐藏。它是这样实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImagesListActivity</span></div><div class="line"><span class="meta">@Subscribe</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideImageThumbnail</span><span class="params">(ChangeImageThumbnailVisibility message)</span></span>&#123;</div><div class="line">    Log.v(TAG, <span class="string">"&gt;&gt; hideImageThumbnail"</span>);</div><div class="line"></div><div class="line">    mImageDetailsImageModel.setVisibility(message.isVisible());</div><div class="line"></div><div class="line">    updateModel(mImageDetailsImageModel);</div><div class="line"></div><div class="line">    Log.v(TAG, <span class="string">"&lt;&lt; hideImageThumbnail"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * This method basically changes visibility of concrete item</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateModel</span><span class="params">(Image imageToUpdate)</span> </span>&#123;</div><div class="line">    Log.v(TAG, <span class="string">"updateModel, imageToUpdate "</span> + imageToUpdate);</div><div class="line">    <span class="keyword">for</span> (Image image : mImagesList) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(image.equals(imageToUpdate))&#123;</div><div class="line">            image.setVisibility(imageToUpdate.isVisible());</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> index = mImagesList.indexOf(imageToUpdate);</div><div class="line">    Log.v(TAG, <span class="string">"updateModel, index "</span> + index);</div><div class="line"></div><div class="line">    mAdapter.notifyItemChanged(index);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * For some reason recycler view is not always redrawn when </div><div class="line">     * adapter is updated.</div><div class="line">     * onBindViewHolder is called but image doesn't disappear from </div><div class="line">     * screen. That's why we have to do this invalidation</div><div class="line">     */</div><div class="line">    Rect dirty = <span class="keyword">new</span> Rect();</div><div class="line">    View viewAtPosition = mLayoutManager.findViewByPosition(index);</div><div class="line">    viewAtPosition.getDrawingRect(dirty);</div><div class="line">    mRecyclerView.invalidate(dirty);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，这里我们用到了我们在启动<code>ImageDetailActivity</code>时保存的<code>mImageDetailsImageModel</code>。</p>
<h3 id="真正创建动画"><a href="#真正创建动画" class="headerlink" title="真正创建动画"></a>真正创建动画</h3><p>让我们仔细分析一下<code>playEnteringAnimation</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playEnteringAnimation</span><span class="params">(</span></span></div><div class="line">    <span class="keyword">int</span> left, </div><div class="line">    <span class="keyword">int</span> top, </div><div class="line">    <span class="keyword">int</span> width,  </div><div class="line">    <span class="keyword">int</span> height) &#123;</div><div class="line">    Log.v(TAG, <span class="string">"&gt;&gt; playEnteringAnimation"</span>);</div><div class="line"></div><div class="line">    mToLeft = left;</div><div class="line">    mToTop = top;</div><div class="line">    mToWidth = width;</div><div class="line">    mToHeight =  height;</div><div class="line"></div><div class="line">    AnimatorSet imageAnimatorSet = createEnteringImageAnimation();</div><div class="line"></div><div class="line">    Animator mainContainerFadeAnimator = </div><div class="line">        createEnteringFadeAnimator();</div><div class="line"></div><div class="line">    mEnteringAnimation = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</div><div class="line">    mEnteringAnimation.setInterpolator(</div><div class="line">        <span class="keyword">new</span> AccelerateInterpolator());</div><div class="line">    mEnteringAnimation.addListener(<span class="keyword">new</span> SimpleAnimationListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            mEnteringAnimation = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mEnteringAnimation != <span class="keyword">null</span>) &#123;</div><div class="line">                mEnteringAnimation = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                mImageTo.setVisibility(View.VISIBLE);</div><div class="line">                mAnimatedImage.setVisibility(View.INVISIBLE);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Animation was cancelled. Do nothing</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    mEnteringAnimation.playTogether(</div><div class="line">            imageAnimatorSet,</div><div class="line">            mainContainerFadeAnimator</div><div class="line">    );</div><div class="line"></div><div class="line">    mEnteringAnimation.start();</div><div class="line">    Log.v(TAG, <span class="string">"&lt;&lt; playEnteringAnimation"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法做了两件事：</p>
<ol>
<li>它结合了两个动画：图片进入动画和根节点淡入动画</li>
<li>如果动画没有被取消，当动画结束时，设置“动画的图片”为不可见，“放大的图片”为可见</li>
</ol>
<p><code>createEnteringFadeAnimator()</code>方法非常简单，它就是一个普通的<code>ObjectAnimator</code>，用于背景动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ObjectAnimator <span class="title">createEnteringFadeAnimator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ObjectAnimator.ofFloat(mMainContainer, <span class="string">"alpha"</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="图片位置和ImageView变换"><a href="#图片位置和ImageView变换" class="headerlink" title="图片位置和ImageView变换"></a>图片位置和ImageView变换</h3><p>有趣的地方在我们前面提到的<code>createEnteringImageAnimation()</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> AnimatorSet <span class="title">createEnteringImageAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.v(TAG, <span class="string">"&gt;&gt; createEnteringImageAnimation"</span>);</div><div class="line">    </div><div class="line">    ObjectAnimator positionAnimator = </div><div class="line">        createEnteringImagePositionAnimator();</div><div class="line">    </div><div class="line">    ObjectAnimator matrixAnimator = </div><div class="line">        createEnteringImageMatrixAnimator();</div><div class="line"></div><div class="line">    AnimatorSet enteringImageAnimation = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    </div><div class="line">    enteringImageAnimation</div><div class="line">        .playTogether(positionAnimator, matrixAnimator);</div><div class="line"></div><div class="line">    Log.v(TAG, <span class="string">"&lt;&lt; createEnteringImageAnimation"</span>);</div><div class="line">    <span class="keyword">return</span> enteringImageAnimation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法结合了两个动画并返回了一个<code>AnimatorSet</code>。</p>
<p><code>createEnteringImagePositionAnimator()</code>方法创建了两个animator，将图片从前一个界面中的位置移动到它在<code>ImageDetailsActivity</code>中应该在的位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ObjectAnimator <span class="title">createEnteringImagePositionAnimator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    Log.v(TAG, <span class="string">"createEnteringImagePositionAnimator"</span>);</div><div class="line"></div><div class="line">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(</div><div class="line">            <span class="string">"left"</span>, </div><div class="line">            mAnimatedImage.getLeft(), </div><div class="line">            mToLeft);</div><div class="line">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(</div><div class="line">            <span class="string">"top"</span>, </div><div class="line">            mAnimatedImage.getTop(),</div><div class="line">            mToTop - getStatusBarHeight());</div><div class="line"></div><div class="line">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(</div><div class="line">            <span class="string">"right"</span>, </div><div class="line">            mAnimatedImage.getRight(), </div><div class="line">            mToLeft + mToWidth);</div><div class="line">   PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(</div><div class="line">            <span class="string">"bottom"</span>, </div><div class="line">            mAnimatedImage.getBottom(), </div><div class="line">            mToTop + mToHeight - getStatusBarHeight());</div><div class="line"></div><div class="line">   ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(</div><div class="line">            mAnimatedImage, </div><div class="line">            propertyLeft, </div><div class="line">            propertyTop, </div><div class="line">            propertyRight, </div><div class="line">            propertyBottom);</div><div class="line">   animator.addListener(<span class="keyword">new</span> SimpleAnimationListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="comment">// set new parameters of animated ImageView. This will </span></div><div class="line">            <span class="comment">// prevent blinking of view when set visibility to </span></div><div class="line">            <span class="comment">// visible in Exit animation</span></div><div class="line">            </div><div class="line">            FrameLayout.LayoutParams layoutParams = </div><div class="line">                  (FrameLayout.LayoutParams) mAnimatedImage</div><div class="line">                                         .getLayoutParams();</div><div class="line">            layoutParams.height = mImageTo.getHeight();</div><div class="line">            layoutParams.width = mImageTo.getWidth();</div><div class="line">            </div><div class="line">            layoutParams.setMargins(</div><div class="line">                mToLeft, </div><div class="line">                mToTop - getStatusBarHeight(), </div><div class="line">                <span class="number">0</span>, </div><div class="line">                <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> animator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法创建了一个<code>ObjectAnimator</code>，改变View的属性：</p>
<ol>
<li>在X轴方向改变<code>ImageView</code>的left属性</li>
<li>在Y轴方向改变<code>ImageView</code>的top属性。注意最终的top位置要减去状态栏的高度。这是因为<code>mToTop</code>变量的值没有把状态栏的高度考虑进去，它是其在屏幕里的top位置。</li>
<li>bottom和top一起，可以改变<code>ImageView</code>的高度。同样的，状态栏的高度也要从<code>mToHeight</code>中减去。</li>
<li>right和left一起改变了<code>ImageView</code>的宽度.</li>
</ol>
<p>当动画结束，图片的位置通过设置<code>ImageView</code>的layoutParams的margin固定下来。</p>
<h3 id="ImageView拉伸的动画"><a href="#ImageView拉伸的动画" class="headerlink" title="ImageView拉伸的动画"></a>ImageView拉伸的动画</h3><p>为了设置<code>ImageView</code>拉伸的动画，我们需要调用<code>ImageView.animateTransform()</code>方法，但是这个方法对开发者不可见。所以我们要创建一个自定义属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This property is passed to ObjectAnimator when we are animating</div><div class="line"> * image matrix of ImageView</div><div class="line"> */</div><div class="line">Property&lt;ImageView, Matrix&gt; ANIMATED_TRANSFORM_PROPERTY </div><div class="line">= <span class="keyword">new</span> Property&lt;ImageView, Matrix&gt;(Matrix.class, <span class="string">"animatedTransform"</span>)&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This is copy-paste form ImageView#animateTransform - method</div><div class="line">     * is invisible in sdk</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ImageView imageView, Matrix matrix)</span> </span>&#123;</div><div class="line">        Drawable drawable = imageView.getDrawable();</div><div class="line">        <span class="keyword">if</span> (drawable == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) &#123;</div><div class="line">            drawable.setBounds(</div><div class="line">            <span class="number">0</span>, </div><div class="line">            <span class="number">0</span>, </div><div class="line">            imageView.getWidth(), </div><div class="line">            imageView.getHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawable.setBounds(</div><div class="line">            <span class="number">0</span>, </div><div class="line">            <span class="number">0</span>, </div><div class="line">            drawable.getIntrinsicWidth(),</div><div class="line">            drawable.getIntrinsicHeight());</div><div class="line">           </div><div class="line">            Matrix drawMatrix = imageView.getImageMatrix();</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (drawMatrix == <span class="keyword">null</span>) &#123;</div><div class="line">                drawMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">                imageView.setImageMatrix(drawMatrix);</div><div class="line">            &#125;</div><div class="line">            imageView.setImageMatrix(matrix);</div><div class="line">        &#125;</div><div class="line">        imageView.invalidate();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Matrix <span class="title">get</span><span class="params">(ImageView object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个方法基本上是从<code>ImageView#animateTransform</code>复制出来的。当<code>Animator</code>尝试改变<code>animatedTransform</code>属性时，<code>set(ImageView, Matrix)</code>方法就会被调用。这个方法给<code>ImageView</code>设置了一个新的<code>Matrix</code>，然后调用<code>invalidate()</code>来让<code>ImageView</code>重绘。</p>
<p>另外，我们需要调用<code>MatrixEvaluator</code>来确定在动画过程中<code>ImageView</code>的拉伸变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This class is passed to ObjectAnimator in order to animate</div><div class="line"> * changes in ImageView image matrix</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatrixEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Matrix</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">float</span>[] mTempStartValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line">    <span class="keyword">float</span>[] mTempEndValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line">    Matrix mTempMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Matrix <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, </span></span></div><div class="line">                           Matrix startValue, </div><div class="line">                           Matrix endValue) &#123;</div><div class="line">        startValue.getValues(mTempStartValues);</div><div class="line">        endValue.getValues(mTempEndValues);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">            <span class="keyword">float</span> diff = mTempEndValues[i] - mTempStartValues[i];</div><div class="line">            mTempEndValues[i] = </div><div class="line">                   mTempStartValues[i] </div><div class="line">                   + (fraction * diff);</div><div class="line">        &#125;</div><div class="line">        mTempMatrix.setValues(mTempEndValues);</div><div class="line">        <span class="keyword">return</span> mTempMatrix;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类（<code>MatrixEvaluator</code>）和 <code>ANIMATED_TRANSFORM_PROPERTY</code>一起传递给ObjectAnimator。</p>
<p>然后调用方法<code>createEnteringImageMatrixAnimator()</code>，它的职责<br>是创建改变图片拉伸的动画。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ObjectAnimator <span class="title">createEnteringImageMatrixAnimator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    Matrix initMatrix = MatrixUtils.getImageMatrix(mAnimatedImage);</div><div class="line">    <span class="comment">// store the data about original matrix into array.</span></div><div class="line">    <span class="comment">// this array will be used later for exit animation</span></div><div class="line">    initMatrix.getValues(mInitThumbnailMatrixValues);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Matrix endMatrix = MatrixUtils.getImageMatrix(mImageTo);</div><div class="line"></div><div class="line">    mAnimatedImage.setScaleType(ImageView.ScaleType.MATRIX);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ObjectAnimator.ofObject(</div><div class="line">        mAnimatedImage, </div><div class="line">        MatrixEvaluator.ANIMATED_TRANSFORM_PROPERTY,</div><div class="line">        <span class="keyword">new</span> MatrixEvaluator(), initMatrix, endMatrix);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法还保存了初始状态的<code>Matrix</code>，给创建退出动画时使用。另外，一件很重要的事情是，动画中的<code>ImageView</code>的<code>scaleType</code>必须设置为<code>ScaleType.Matrix</code>。</p>
<h3 id="ImageDetailsActivity的退出动画"><a href="#ImageDetailsActivity的退出动画" class="headerlink" title="ImageDetailsActivity的退出动画"></a>ImageDetailsActivity的退出动画</h3><p>退出动画没有什么特别的，基本上就是把同样的动画反着运行。我们真正需要处理的情况是，进入动画进行到中间，我们就要退出的情况。我们必须停止进入动画，然后把<code>ImageView</code>移动回原来的位置。</p>
<p>我们还需要处理返回按钮点击事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//We don't call super to keep this activity on the screen when </span></div><div class="line">    <span class="comment">//back is pressed</span></div><div class="line">    Log.v(TAG, <span class="string">"onBackPressed"</span>);</div><div class="line"></div><div class="line">    mEnterScreenAnimations.cancelRunningAnimations();</div><div class="line"></div><div class="line">    Bundle initialBundle = getIntent().getExtras();</div><div class="line">    <span class="keyword">int</span> toTop = </div><div class="line">        initialBundle.getInt(KEY_THUMBNAIL_INIT_TOP_POSITION);</div><div class="line">    <span class="keyword">int</span> toLeft = </div><div class="line">        initialBundle.getInt(KEY_THUMBNAIL_INIT_LEFT_POSITION);</div><div class="line">    <span class="keyword">int</span> toWidth = </div><div class="line">        initialBundle.getInt(KEY_THUMBNAIL_INIT_WIDTH);</div><div class="line">    <span class="keyword">int</span> toHeight = </div><div class="line">        initialBundle.getInt(KEY_THUMBNAIL_INIT_HEIGHT);</div><div class="line"></div><div class="line">    mExitScreenAnimations.playExitAnimations(</div><div class="line">        toTop,</div><div class="line">        toLeft,</div><div class="line">        toWidth,</div><div class="line">        toHeight,</div><div class="line">        mEnterScreenAnimations.getInitialThumbnailMatrixValues());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>流程是这样的：</p>
<ol>
<li>如果进入动画还在运行，我们把它取消了。进入动画被设计成了动画取消的时候，<code>ImageView</code>会停在取消时的当前位置。</li>
<li>我们利用从<code>ImageListActivity</code>传递过来的bundle来取出<code>ImageView</code>的初始属性。这些值被传到退出动画<code>ExitScreenAnimations</code>里，作为图片的最终位置。</li>
<li><code>ImageView Matrix</code>的初始值在进入动画创建的时候保存下来了。</li>
</ol>
<p>进入动画和退出动画之间几乎没有区别，请查看<a href="https://github.com/danylovolokh/ImageTransition" target="_blank" rel="external">Github</a> 上的源码获取更多细节。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近想要对项目里的一些过场动画作体验优化，但是迫于API level的限制，无法直接使用Android原生的特性，刚好可以参考此文实现。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.jagzoke8q&quot;&gt;Implementing ImageView transition between activities for pre-Lollipop devices.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Android 5.0开始，谷歌引入了一个很好玩的特性，“共享元素过场(shared elements transition)”。使用它我们可以让我们的UI元素在activity切换时就像用一个很酷的动画从一个activity移动到另一个一样。我们将在Android 5.0以下实现它。文中使用的代码可以在&lt;a href=&quot;https://github.com/danylovolokh/ImageTransition&quot;&gt;GitHub&lt;/a&gt;上找到。&lt;/p&gt;
&lt;p&gt;本文的动画基于Chet Haase的视频：&lt;a href=&quot;https://www.youtube.com/watch?v=CPxkoe2MraA&quot;&gt;DevBytes: Custom Activity Animations&lt;/a&gt;&lt;a href=&quot;http://savefrom.net/?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCPxkoe2MraA&amp;amp;utm_source=chameleon&amp;amp;utm_medium=extensions&amp;amp;utm_campaign=link_modifier&quot; title=&quot;Get a direct link&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文和Chet的例子不同之处在于，我还会处理&lt;code&gt;ImageView&lt;/code&gt;的缩放。这会使动画看起来更自然。&lt;code&gt;ImageView&lt;/code&gt;在前一个界面的&lt;code&gt;ImageView.ScaleType&lt;/code&gt;跟第二个界面放大的&lt;code&gt;ImageView&lt;/code&gt;是不一样的。以下是一个示例：&lt;br&gt;&lt;img src=&quot;http://o6l8fqr7s.bkt.clouddn.com/set_1-1.gif&quot; alt=&quot;&quot; title=&quot;Shared element transition from one activity to another.&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o6l8fqr7s.bkt.clouddn.com/set_2-1.gif&quot; alt=&quot;&quot; title=&quot;Canceling of shared element transition until it’s finished.&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是它用原生shared element transition实现的样子：&lt;br&gt;&lt;img src=&quot;http://o6l8fqr7s.bkt.clouddn.com/set_3-1.gif&quot; alt=&quot;&quot; title=&quot;Shared element transition between activities on Android Lollipop.&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="UI" scheme="http://www.xieyubin.com/categories/UI/"/>
    
    
      <category term="transition" scheme="http://www.xieyubin.com/tags/transition/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.xieyubin.com/hello-world/"/>
    <id>http://www.xieyubin.com/hello-world/</id>
    <published>2016-09-27T15:45:35.000Z</published>
    <updated>2016-09-27T15:45:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
